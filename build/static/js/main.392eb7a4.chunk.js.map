{"version":3,"sources":["components/WeatherContext.js","components/Header.js","utils/utils.js","components/Forecast.js","components/MainForecast.js","components/Card.js","components/Form.js","components/WeatherList.js","components/CityPage.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherContext","createContext","WeatherProvider","props","useState","data","setData","cityName","setCityName","isLoading","setIsLoading","errMsg","setErrMsg","URL","process","getWeather","e","a","fetch","response","json","weather","status","ok","message","Error","console","log","Provider","value","children","Header","city","name","sys","className","to","id","country","getCelcius","temperature","toFixed","forecast","coord","cityLocation","lat","lon","main","temp_min","temp_max","MainForecast","string","description","charAt","toUpperCase","slice","Card","useContext","onClick","restIndex","filter","item","handleDelete","Forecast","Form","onSubmit","preventDefault","htmlFor","type","placeholder","onChange","target","WeatherList","length","map","index","CityPage","cityId","useParams","chart","setChart","navigate","useNavigate","useEffect","fetchData","fillData","tempData","num","cnt","push","date","list","dt_txt","temp","parseFloat","ResponsiveContainer","width","height","AreaChart","x1","y1","x2","y2","offset","stopColor","stopOpacity","Area","dataKey","stroke","fill","XAxis","tickCount","YAxis","Tooltip","CartesianGrid","opacity","vertical","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.392eb7a4.chunk.js","sourcesContent":["import { useState, createContext } from \"react\";\n\nexport const WeatherContext = createContext();\n\nexport const WeatherProvider = (props) => {\n  const [data, setData] = useState([]);\n  const [cityName, setCityName] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [errMsg, setErrMsg] = useState(null);\n\n  const URL = `http://api.openweathermap.org/data/2.5/weather?units=metric&q=${cityName}&appid=${process.env.REACT_APP_OPENWEATHERMAP_API_KEY}`;\n\n  const getWeather = async (e) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(URL);\n      const weather = await response.json();\n      if (response.status !== 200 || !response.ok) {\n        setErrMsg(weather.message);\n        throw new Error(weather.message);\n      } else {\n        setIsLoading(true);\n\n        setData([...data, weather]);\n        setErrMsg(null);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setIsLoading(false);\n      setCityName(\"\");\n    }\n  };\n\n  return (\n    <WeatherContext.Provider\n      value={{\n        data,\n        setData,\n        cityName,\n        setCityName,\n        getWeather,\n        isLoading,\n        setIsLoading,\n        errMsg,\n        setErrMsg,\n      }}\n    >\n      {props.children}\n    </WeatherContext.Provider>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Header = ({ city }) => {\n  const { name, sys } = city;\n  return (\n    <div>\n      <h1>\n        <Link className=\"decoration\" to={`/${city.id}`}>\n          {name}\n        </Link>\n        , {sys.country}\n      </h1>\n    </div>\n  );\n};\n\nexport default Header;\n","export const getCelcius = (temperature) => {\n  return ((temperature - 32) * (5 / 9)).toFixed(1);\n};\n","import React from \"react\";\nimport { getCelcius } from \"../utils/utils\";\n\nconst forecast = ({ city }) => {\n  const { coord } = city;\n  const cityLocation = `${coord.lat},${coord.lon}`;\n  return (\n    <>\n      <span>\n        <strong>min temp: </strong> {getCelcius(city.main.temp_min)}\n      </span>{\" \"}\n      <br />\n      <span>\n        <strong>max temp: </strong>\n        {getCelcius(city.main.temp_max)}\n      </span>{\" \"}\n      <br />\n      <span>\n        <strong>location: </strong>\n        {cityLocation}\n      </span>\n    </>\n  );\n};\n\nexport default forecast;\n","import React from \"react\";\n\nconst MainForecast = ({ city }) => {\n  function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n  return (\n    <>\n      <h2>{city.main} </h2>\n\n      <h4>{capitalizeFirstLetter(city.description)}</h4>\n    </>\n  );\n};\n\nexport default MainForecast;\n","import React, { useContext } from \"react\";\nimport { WeatherContext } from \"./WeatherContext\";\nimport Header from \"./Header.js\";\nimport Forecast from \"./Forecast\";\nimport MainForecast from \"./MainForecast.js\";\nimport { ImCancelCircle } from \"react-icons/im\";\n\nconst Card = ({ city }) => {\n    console.log(city);\n  const { setData, data } = useContext(WeatherContext);\n\n  const handleDelete = (id) => {\n    const restIndex = data.filter((item) => item.id !== id);\n    setData(restIndex);\n  };\n\n  return (\n    <div className=\"card\">\n      <button className=\"clear-btn\" onClick={() => handleDelete(city.id)}>\n        <ImCancelCircle />\n      </button>\n      <Header city={city} />\n      <MainForecast city={city.weather[0]} />\n      <Forecast city={city} />\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useContext } from \"react\";\nimport { WeatherContext } from \"./WeatherContext\";\n\nfunction Form() {\n  const { cityName, setCityName, getWeather } = useContext(WeatherContext);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (cityName !== \"\") {\n      getWeather();\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"search\">search for city's weather</label>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"e.g Groningen\"\n          onChange={(e) => setCityName(e.target.value)}\n          value={cityName}\n          name=\"cityName\"\n        />\n        <button className=\"btn-d \" type=\"submit\">\n          click to search\n        </button>\n      </form>\n    </>\n  );\n}\n\nexport default Form;\n","import React, { useContext } from \"react\";\nimport \"../App.css\";\nimport Card from \"./Card.js\";\nimport Form from \"./Form\";\nimport { WeatherContext } from \"./WeatherContext\";\n\nfunction WeatherList() {\n  const { data, cityName, isLoading, errMsg, setErrMsg } = useContext(WeatherContext);\n\n  return (\n    <>\n      <div className=\"container\">\n        <h1>Weather</h1>\n        <Form cityName={cityName} setErrMsg={setErrMsg} />\n      </div>\n      {errMsg && <h3 className=\"errorMessage\">{errMsg}</h3>}\n      {isLoading && <h3 className=\"errorMessage\">Loading...</h3>}\n\n      {data.length > 0 ? (\n        <div className=\"container\">\n          <h4 className=\"click\">Click on the city to see the charts</h4>\n          {data &&\n            data.map((city, index) => {\n              return <Card key={index} city={city} />;\n            })}\n        </div>\n      ) : (\n        <h2 className=\"container\">\n          Welcome to the city weather app <br />\n          write the name of your favorite city and forecast it's weather\n        </h2>\n      )}\n    </>\n  );\n}\n\nexport default WeatherList;\n","import React, { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nimport {\n  XAxis,\n  Tooltip,\n  CartesianGrid,\n  YAxis,\n  ResponsiveContainer,\n  AreaChart,\n  Area,\n} from \"recharts\";\n\nexport const CityPage = () => {\n  const { cityId } = useParams();\n  const [data, setData] = useState({});\n  const [chart, setChart] = useState([]);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\n          `https://api.openweathermap.org/data/2.5/forecast?id=${cityId}&units=metric&appid=${process.env.REACT_APP_OPENWEATHERMAP_API_KEY}`\n        );\n        const data = await response.json();\n        setData(data);\n        fillData(data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    fetchData();\n  }, [cityId]);\n\n  const fillData = (data) => {\n    const tempData = [];\n    for (let num = 0; num < data.cnt; num++) {\n      tempData.push({\n        date: data.list[num].dt_txt,\n        temp: parseFloat(data.list[num].main.temp),\n      });\n    }\n    setChart(tempData);\n  };\n\n  return (\n    <div>\n      {chart.length !== 0 && (\n        <>\n          <button className=\"back\" onClick={() => navigate(\"/\")}>\n            Back\n          </button>\n          <h1 className=\"container\">charts of 5 days for your favorite city</h1>\n          <h3>\n            {data.city.name}, {data.city.country}\n          </h3>\n          <ResponsiveContainer width={1300} height={500}>\n            <AreaChart data={chart}>\n              <defs>\n                <linearGradient id=\"color\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"0%\" stopColor=\"#0000ff\" stopOpacity={0.4} />\n                  <stop offset=\"0%\" stopColor=\"#00cc99\" stopOpacity={0.5} />\n                </linearGradient>\n              </defs>\n              <Area dataKey=\"temp\" stroke=\"#3431A7\" fill=\"url(#color)\" />\n              <XAxis dataKey=\"date\" tickCount={5} />\n              <YAxis dataKey=\"temp\" tickCount={4} />\n              <Tooltip />\n              <CartesianGrid opacity={0.1} vertical={false} />\n            </AreaChart>\n          </ResponsiveContainer>\n        </>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport WeatherList from \"./components/WeatherList\";\nimport { CityPage } from \"./components/CityPage\";\nimport { WeatherProvider } from \"./components/WeatherContext\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <WeatherProvider>\n      <Router>\n        <Routes>\n          <Route path=\"/\" element={<WeatherList />} />\n          <Route path=\"/:cityId\" element={<CityPage />} />\n        </Routes>\n      </Router>\n    </WeatherProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}