{"ast":null,"code":"var _jsxFileName = \"/Users/ammaradel/Desktop/HYF-projects/weather-app/src/components/WeatherContext.js\",\n    _s = $RefreshSig$();\n\nimport { useState, createContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WeatherContext = /*#__PURE__*/createContext();\nexport const WeatherProvider = props => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [cityName, setCityName] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [errMsg, setErrMsg] = useState(null);\n  const KEY = \"ff7e9b79da159cf2601abe1fbd29d6e0\";\n  const URL = `http://api.openweathermap.org/data/2.5/weather?units=metric&q=${cityName}&appid=${KEY}`;\n\n  const getWeather = async e => {\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(URL);\n      const weather = await response.json();\n\n      if (response.status !== 200 || !response.ok) {\n        setErrMsg(weather.message);\n        throw new Error(weather.message);\n      } else {\n        setIsLoading(true);\n        setData([...data, weather]);\n        setErrMsg(null);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setIsLoading(false);\n      setCityName(\"\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(WeatherContext.Provider, {\n    value: {\n      data,\n      setData,\n      cityName,\n      setCityName,\n      getWeather,\n      isLoading,\n      setIsLoading,\n      errMsg,\n      setErrMsg\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WeatherProvider, \"suiRvfJIS+zbbMhHvct3oAQhRJI=\");\n\n_c = WeatherProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherProvider\");","map":{"version":3,"sources":["/Users/ammaradel/Desktop/HYF-projects/weather-app/src/components/WeatherContext.js"],"names":["useState","createContext","WeatherContext","WeatherProvider","props","data","setData","cityName","setCityName","isLoading","setIsLoading","errMsg","setErrMsg","KEY","URL","getWeather","e","response","fetch","weather","json","status","ok","message","Error","error","console","log","children"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,aAAnB,QAAwC,OAAxC;;AAEA,OAAO,MAAMC,cAAc,gBAAGD,aAAa,EAApC;AAEP,OAAO,MAAME,eAAe,GAAIC,KAAD,IAAW;AAAA;;AACxC,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,IAAD,CAApC;AACA,QAAMa,GAAG,GAAG,kCAAZ;AACA,QAAMC,GAAG,GAAI,iEAAgEP,QAAS,UAASM,GAAI,EAAnG;;AAEA,QAAME,UAAU,GAAG,MAAOC,CAAP,IAAa;AAC9BN,IAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,QAAI;AACF,YAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAD,CAA5B;AACA,YAAMK,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;;AACA,UAAIH,QAAQ,CAACI,MAAT,KAAoB,GAApB,IAA2B,CAACJ,QAAQ,CAACK,EAAzC,EAA6C;AAC3CV,QAAAA,SAAS,CAACO,OAAO,CAACI,OAAT,CAAT;AACA,cAAM,IAAIC,KAAJ,CAAUL,OAAO,CAACI,OAAlB,CAAN;AACD,OAHD,MAGO;AACLb,QAAAA,YAAY,CAAC,IAAD,CAAZ;AAEAJ,QAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAUc,OAAV,CAAD,CAAP;AACAP,QAAAA,SAAS,CAAC,IAAD,CAAT;AACD;AACF,KAZD,CAYE,OAAOa,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAdD,SAcU;AACRf,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,MAAAA,WAAW,CAAC,EAAD,CAAX;AACD;AACF,GArBD;;AAuBA,sBACE,QAAC,cAAD,CAAgB,QAAhB;AACE,IAAA,KAAK,EAAE;AACLH,MAAAA,IADK;AAELC,MAAAA,OAFK;AAGLC,MAAAA,QAHK;AAILC,MAAAA,WAJK;AAKLO,MAAAA,UALK;AAMLN,MAAAA,SANK;AAOLC,MAAAA,YAPK;AAQLC,MAAAA,MARK;AASLC,MAAAA;AATK,KADT;AAAA,cAaGR,KAAK,CAACwB;AAbT;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAhDM;;GAAMzB,e;;KAAAA,e","sourcesContent":["import { useState, createContext } from \"react\";\n\nexport const WeatherContext = createContext();\n\nexport const WeatherProvider = (props) => {\n  const [data, setData] = useState([]);\n  const [cityName, setCityName] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [errMsg, setErrMsg] = useState(null);\n  const KEY = \"ff7e9b79da159cf2601abe1fbd29d6e0\"\n  const URL = `http://api.openweathermap.org/data/2.5/weather?units=metric&q=${cityName}&appid=${KEY}`;\n\n  const getWeather = async (e) => {\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(URL);\n      const weather = await response.json();\n      if (response.status !== 200 || !response.ok) {\n        setErrMsg(weather.message);\n        throw new Error(weather.message);\n      } else {\n        setIsLoading(true);\n\n        setData([...data, weather]);\n        setErrMsg(null);\n      }\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setIsLoading(false);\n      setCityName(\"\");\n    }\n  };\n\n  return (\n    <WeatherContext.Provider\n      value={{\n        data,\n        setData,\n        cityName,\n        setCityName,\n        getWeather,\n        isLoading,\n        setIsLoading,\n        errMsg,\n        setErrMsg,\n      }}\n    >\n      {props.children}\n    </WeatherContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}